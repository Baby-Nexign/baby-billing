{"name": "Тест: BRT обрабатывает комплексную пачку CDR (валидные и невалидные)", "status": "failed", "statusDetails": {"message": "AssertionError: Ожидалось 10 записей в 'cdr_record' (согласно файлу), но найдено 0. Записи: []\nassert 0 == 10\n +  where 0 = len([])", "trace": "db_connection = <psycopg.Connection [INTRANS] (host=localhost user=postgres database=brt) at 0x7fcc111cfcb0>\n\n    @allure.epic(\"Обработка CDR в BRT\")\n    @allure.feature(\"Комплексные сценарии - Смешанные данные\")\n    @allure.story(\"Обработка смешанной пачки валидных и невалидных CDR\")\n    @allure.title(\"Тест: BRT обрабатывает комплексную пачку CDR (валидные и невалидные)\")\n    @allure.description(\n        f\"Проверяет обработку пачки CDR из файла '{COMPLEX_CDR_BATCH_FILE}', содержащей как корректные, \"\n        f\"так и некорректные записи. Ожидается, что только корректные CDR (10 из 20 по условию теста) будут сохранены.\"\n    )\n    @allure.severity(allure.severity_level.CRITICAL)\n    def test_brt_processes_complex_cdr_batch_minimal_checks(\n            db_connection: psycopg.Connection\n    ):\n        \"\"\"\n        Проверяет обработку пачки из 20 CDR (10 корректных, 10 с ошибками).\n        Ожидается, что только 10 корректных CDR будут сохранены.\n        Тест полагается на то, что тестовый файл корректно составлен.\n        \"\"\"\n        test_file_path = COMPLEX_CDR_BATCH_FILE\n        logger.info(f\"--- Тест: Комплексная обработка CDR из {test_file_path} (минимальные проверки в тесте) ---\")\n    \n        with allure.step(f\"1. Подготовка БД: создание/проверка абонентов {list(ALLOWED_FIRST_MSISDNS)} и очистка cdr_record\"):\n            msisdns_to_prepare_in_db = list(ALLOWED_FIRST_MSISDNS)\n            logger.info(f\"Подготовка БД: создание абонентов {msisdns_to_prepare_in_db} и очистка cdr_record...\")\n            subscriber_ids = prepare_database_for_cdr_test(db_connection, msisdns_to_prepare_in_db)\n            allure.attach(\n                json.dumps(subscriber_ids, indent=2, ensure_ascii=False),\n                name=\"ID подготовленных/проверенных абонентов\",\n                attachment_type=allure.attachment_type.JSON\n            )\n            logger.info(f\"БД подготовлена (только разрешенные firstSubscriberMsisdn). ID абонентов: {subscriber_ids}\")\n    \n        with allure.step(f\"2. Чтение смешанной пачки CDR из файла: {test_file_path}\"):\n            logger.info(f\"Чтение CDR из файла: {test_file_path}\")\n            all_cdrs_from_file = read_cdr_file(test_file_path)\n            allure.attach(\n                json.dumps(all_cdrs_from_file, indent=2, ensure_ascii=False),\n                name=f\"Содержимое файла {test_file_path} (смешанная пачка)\",\n                attachment_type=allure.attachment_type.JSON\n            )\n            assert len(all_cdrs_from_file) > 0, f\"Файл {test_file_path} пуст или не найден.\"\n    \n            # Информация о количестве прочитанных записей (включая предупреждение, если оно есть)\n            num_read_from_file = len(all_cdrs_from_file)\n            expected_in_file_for_test_logic = 20 # Тест ожидает 20 для своей логики\n            file_read_summary = f\"Прочитано CDR из файла: {num_read_from_file}.\"\n            if num_read_from_file != expected_in_file_for_test_logic:\n                warning_message = (f\"ВНИМАНИЕ: В файле {test_file_path} прочитано {num_read_from_file} CDR, \"\n                                   f\"хотя тест рассчитан на {expected_in_file_for_test_logic} записей \"\n                                   f\"(10 валидных, 10 невалидных). Результаты могут быть нерепрезентативными.\")\n                logger.warning(warning_message)\n                file_read_summary += f\"\\n{warning_message}\"\n            allure.attach(file_read_summary, name=\"Сводка по чтению файла\", attachment_type=allure.attachment_type.TEXT)\n            logger.info(f\"Прочитано {num_read_from_file} CDR для отправки.\")\n    \n    \n        expected_records_count_in_db = 10 # Ключевое ожидание теста\n        allure.attach(\n            str(expected_records_count_in_db),\n            name=\"Ожидаемое количество ВАЛИДНЫХ CDR для сохранения в БД\",\n            attachment_type=allure.attachment_type.TEXT\n        )\n        logger.info(\n            f\"Ожидается {expected_records_count_in_db} валидных CDR для сохранения в БД (согласно структуре файла).\")\n    \n        with allure.step(f\"3. Отправка {len(all_cdrs_from_file)} CDR (смешанная пачка) в RabbitMQ\"):\n            logger.info(f\"Отправка {len(all_cdrs_from_file)} CDR в RabbitMQ...\")\n            allure.attach(\n                json.dumps(all_cdrs_from_file, indent=2, ensure_ascii=False),\n                name=\"Все CDRы (смешанная пачка), отправленные в RabbitMQ\",\n                attachment_type=allure.attachment_type.JSON\n            )\n            send_status = send_cdr_list_to_rabbitmq(all_cdrs_from_file)\n            assert send_status, \"Не удалось отправить CDR в RabbitMQ.\"\n    \n        processing_time_seconds = 10 # Для комплексной пачки может потребоваться больше времени\n        with allure.step(f\"4. Ожидание {processing_time_seconds} сек. для обработки CDR сервисом BRT\"):\n            logger.info(f\"Ожидание {processing_time_seconds} сек. для обработки BRT...\")\n            time.sleep(processing_time_seconds)\n    \n        with allure.step(f\"5. Проверка количества сохраненных записей в таблице cdr_record (ожидается: {expected_records_count_in_db})\"):\n            logger.info(\"Получение записей из cdr_record...\")\n            # Запрашиваем достаточно, чтобы увидеть все потенциально созданные записи\n            created_records = get_cdr_records(db_connection, limit=len(all_cdrs_from_file) + 5)\n            logger.info(f\"Фактически найдено в cdr_record: {len(created_records)}.\")\n    \n            allure.attach(\n                f\"Ожидалось записей (только валидные): {expected_records_count_in_db}\\n\"\n                f\"Фактически найдено записей: {len(created_records)}\",\n                name=\"Сводка по записям в БД\",\n                attachment_type=allure.attachment_type.TEXT\n            )\n            allure.attach(\n                json.dumps(created_records, indent=2, ensure_ascii=False, default=str),\n                name=\"Записи, полученные из cdr_record\",\n                attachment_type=allure.attachment_type.JSON\n            )\n>           assert len(created_records) == expected_records_count_in_db, \\\n                (f\"Ожидалось {expected_records_count_in_db} записей в 'cdr_record' (согласно файлу), \"\n                 f\"но найдено {len(created_records)}. Записи: {created_records}\")\nE           AssertionError: Ожидалось 10 записей в 'cdr_record' (согласно файлу), но найдено 0. Записи: []\nE           assert 0 == 10\nE            +  where 0 = len([])\n\ntests/test_complex_cdr.py:112: AssertionError"}, "description": "Проверяет обработку пачки CDR из файла 'test_data/complex_cdr_batch.jsonl', содержащей как корректные, так и некорректные записи. Ожидается, что только корректные CDR (10 из 20 по условию теста) будут сохранены.", "steps": [{"name": "1. Подготовка БД: создание/проверка абонентов ['79996667755', '79334455667', '79123456789'] и очистка cdr_record", "status": "passed", "attachments": [{"name": "ID подготовленных/проверенных абонентов", "source": "93c895d3-1409-4238-842f-83ef51882207-attachment.json", "type": "application/json"}], "start": 1746967588785, "stop": 1746967588796}, {"name": "2. Чтение смешанной пачки CDR из файла: test_data/complex_cdr_batch.jsonl", "status": "passed", "attachments": [{"name": "Содержимое файла test_data/complex_cdr_batch.jsonl (смешанная пачка)", "source": "f7a961e4-be28-4009-90f4-0da3f08a1316-attachment.json", "type": "application/json"}, {"name": "Сводка по чтению файла", "source": "bad2016b-f714-46c2-a5e5-693a6e6ef21b-attachment.txt", "type": "text/plain"}], "start": 1746967588796, "stop": 1746967588798}, {"name": "3. Отправка 20 CDR (смешанная пачка) в RabbitMQ", "status": "passed", "attachments": [{"name": "Все CDRы (смешанная пачка), отправленные в RabbitMQ", "source": "26245c2c-3010-4a1c-85e0-e840ad319840-attachment.json", "type": "application/json"}], "start": 1746967588798, "stop": 1746967588808}, {"name": "4. Ожидание 10 сек. для обработки CDR сервисом BRT", "status": "passed", "start": 1746967588808, "stop": 1746967598808}, {"name": "5. Проверка количества сохраненных записей в таблице cdr_record (ожидается: 10)", "status": "failed", "statusDetails": {"message": "AssertionError: Ожидалось 10 записей в 'cdr_record' (согласно файлу), но найдено 0. Записи: []\nassert 0 == 10\n +  where 0 = len([])\n", "trace": "  File \"/home/imenov/nexign/auto_tests/baby-billing/auto-tests/brt_test_cdr/tests/test_complex_cdr.py\", line 112, in test_brt_processes_complex_cdr_batch_minimal_checks\n    assert len(created_records) == expected_records_count_in_db, \\\n        (f\"Ожидалось {expected_records_count_in_db} записей в 'cdr_record' (согласно файлу), \"\n         f\"но найдено {len(created_records)}. Записи: {created_records}\")\n"}, "attachments": [{"name": "Сводка по записям в БД", "source": "36be6251-8e77-41f3-8425-70d0a3e013e9-attachment.txt", "type": "text/plain"}, {"name": "Записи, полученные из cdr_record", "source": "0c66e08f-d4e9-4670-b2e8-535126f47865-attachment.json", "type": "application/json"}], "start": 1746967598808, "stop": 1746967598816}], "attachments": [{"name": "Ожидаемое количество ВАЛИДНЫХ CDR для сохранения в БД", "source": "a9e8bd60-e97a-4944-ad4d-bd954eaa3df2-attachment.txt", "type": "text/plain"}, {"name": "log", "source": "02d67675-d580-450a-82b0-d31337cf78ce-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "95a85477-a8e7-4d5c-958b-b74587cedb17-attachment.txt", "type": "text/plain"}], "start": 1746967588785, "stop": 1746967598819, "uuid": "3e54557e-11d7-4af6-a1d7-25697452377b", "historyId": "eb772b19fe96cdc29fac45ad22f39a27", "testCaseId": "eb772b19fe96cdc29fac45ad22f39a27", "fullName": "tests.test_complex_cdr#test_brt_processes_complex_cdr_batch_minimal_checks", "labels": [{"name": "feature", "value": "Комплексные сценарии - Смешанные данные"}, {"name": "severity", "value": "critical"}, {"name": "epic", "value": "Обработка CDR в BRT"}, {"name": "story", "value": "Обработка смешанной пачки валидных и невалидных CDR"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_complex_cdr"}, {"name": "host", "value": "imenov"}, {"name": "thread", "value": "32580-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_complex_cdr"}]}