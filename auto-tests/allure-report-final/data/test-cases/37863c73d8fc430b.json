{"uid":"37863c73d8fc430b","name":"Тест: BRT отклоняет CDR, если время окончания звонка раньше времени начала","fullName":"tests.test_start_after_end#test_no_invalid_cdr_inserted_when_end_before_start","historyId":"ce4cd188a8fcf9d582a3a0b59d3fd0e6","time":{"start":1746967627362,"stop":1746967632389,"duration":5027},"description":"Проверяет, что CDR, где время окончания ('callEnd') предшествует времени начала ('callStart'), НЕ добавляются в таблицу 'cdr_record'. Используется файл: test_data/end_before_start.jsonl. Ожидается 0 записей в БД.","descriptionHtml":"<p>Проверяет, что CDR, где время окончания ('callEnd') предшествует времени начала ('callStart'), НЕ добавляются в таблицу 'cdr_record'. Используется файл: test_data/end_before_start.jsonl. Ожидается 0 записей в БД.</p>\n","status":"failed","statusMessage":"AssertionError: Ожидалось 0 записей в 'cdr_record' после отправки невалидных данных, но найдено 10.\nassert 10 == 0\n +  where 10 = len([{'id': 10, 'in_one_network': True, 'lasts': -1000000000, 'msisdn_one': '79334455667', ...}, {'id': 9, 'in_one_network': False, 'lasts': -1000000000, 'msisdn_one': '79123456789', ...}, {'id': 8, 'in_one_network': True, 'lasts': -15000000000, 'msisdn_one': '79996667755', ...}, {'id': 7, 'in_one_network': True, 'lasts': -60000000000, 'msisdn_one': '79334455667', ...}, {'id': 6, 'in_one_network': True, 'lasts': -1000000000, 'msisdn_one': '79123456789', ...}, {'id': 5, 'in_one_network': False, 'lasts': 0, 'msisdn_one': '79996667755', ...}, ...])","statusTrace":"db_connection = <psycopg.Connection [INTRANS] (host=localhost user=postgres database=brt) at 0x7fcc111d9370>\n\n    @allure.epic(\"Обработка CDR в BRT\")\n    @allure.feature(\"Негативные сценарии - Логическая валидация\")\n    @allure.story(\"Отклонение CDR, где callEnd раньше callStart\")\n    @allure.title(\"Тест: BRT отклоняет CDR, если время окончания звонка раньше времени начала\")\n    @allure.description(\n        \"Проверяет, что CDR, где время окончания ('callEnd') предшествует времени начала ('callStart'), \"\n        \"НЕ добавляются в таблицу 'cdr_record'. Используется файл: test_data/end_before_start.jsonl. \"\n        \"Ожидается 0 записей в БД.\"\n    )\n    @allure.severity(allure.severity_level.CRITICAL)\n    def test_no_invalid_cdr_inserted_when_end_before_start(\n        db_connection: psycopg.Connection\n    ):\n        \"\"\"\n        Проверяет, что CDR, где время окончания ('callEnd') предшествует времени начала ('callStart'),\n        НЕ добавляются в таблицу 'cdr_record'. Предполагается, что такие записи отбрасываются\n        обработчиком.\n        \"\"\"\n        cdr_file_path = \"test_data/end_before_start.jsonl\"\n        logger.info(f\"--- Запуск теста: Проверка отсутствия вставки невалидных CDR (callEnd < callStart) из {cdr_file_path} ---\")\n    \n        required_msisdns = [\"79123456789\", \"79996667755\", \"79334455667\"]\n        with allure.step(f\"1. Подготовка БД: создание/проверка абонентов {required_msisdns} и очистка cdr_record\"):\n            logger.info(f\"Подготовка БД (очистка cdr_record, создание абонентов): {required_msisdns}...\")\n            subscriber_ids = prepare_database_for_cdr_test(db_connection, required_msisdns)\n            allure.attach(\n                json.dumps(subscriber_ids, indent=2, ensure_ascii=False),\n                name=\"ID подготовленных/проверенных абонентов\",\n                attachment_type=allure.attachment_type.JSON\n            )\n            assert len(subscriber_ids) == len(required_msisdns), \"Не удалось подготовить абонентов в БД\"\n            logger.info(f\"БД подготовлена. ID абонентов: {subscriber_ids}\")\n    \n        with allure.step(f\"2. Чтение CDR (callEnd < callStart) из файла: {cdr_file_path}\"):\n            logger.info(f\"Чтение CDR из файла: {cdr_file_path}\")\n            cdr_list_to_send = read_cdr_file(cdr_file_path)\n            allure.attach(\n                json.dumps(cdr_list_to_send, indent=2, ensure_ascii=False),\n                name=f\"Содержимое файла {cdr_file_path} (callEnd < callStart)\",\n                attachment_type=allure.attachment_type.JSON\n            )\n            assert cdr_list_to_send, f\"Не удалось прочитать данные из {cdr_file_path} или файл пуст\"\n            logger.info(f\"Прочитано {len(cdr_list_to_send)} записей из файла для отправки (все невалидные).\")\n    \n        expected_records_in_cdr_table = 0\n        allure.attach(\n            str(expected_records_in_cdr_table),\n            name=\"Ожидаемое количество записей в БД после обработки\",\n            attachment_type=allure.attachment_type.TEXT\n        )\n    \n        with allure.step(f\"3. Отправка {len(cdr_list_to_send)} CDR (callEnd < callStart) в RabbitMQ\"):\n            logger.info(\"Отправка невалидных CDR данных в RabbitMQ...\")\n            allure.attach(\n                json.dumps(cdr_list_to_send, indent=2, ensure_ascii=False),\n                name=\"CDRы (callEnd < callStart), отправленные в RabbitMQ\",\n                attachment_type=allure.attachment_type.JSON\n            )\n            send_success = send_cdr_list_to_rabbitmq(cdr_list_to_send)\n            assert send_success, \"Не удалось отправить сообщение в RabbitMQ\"\n    \n        processing_time_seconds = 5\n        with allure.step(f\"4. Ожидание {processing_time_seconds} секунд для обработки CDR сервисом BRT\"):\n            logger.info(f\"Ожидание {processing_time_seconds} секунд для обработки CDR консьюмером...\")\n            time.sleep(processing_time_seconds)\n    \n        with allure.step(f\"5. Проверка отсутствия записей в таблице cdr_record (ожидается: {expected_records_in_cdr_table})\"):\n            logger.info(\"Проверка таблицы cdr_record на отсутствие новых записей...\")\n            # Используем переменную created_records для консистентности с другими тестами\n            created_records = get_cdr_records(db_connection, limit=len(cdr_list_to_send) + 5)\n            logger.info(f\"Фактически найдено в cdr_record: {len(created_records)}.\")\n    \n            allure.attach(\n                f\"Ожидалось записей: {expected_records_in_cdr_table}\\n\"\n                f\"Фактически найдено записей: {len(created_records)}\",\n                name=\"Сводка по записям в БД\",\n                attachment_type=allure.attachment_type.TEXT\n            )\n            if created_records: # Прикрепляем только если что-то неожиданно нашлось\n                allure.attach(\n                    json.dumps(created_records, indent=2, ensure_ascii=False, default=str),\n                    name=\"Записи, полученные из cdr_record (не ожидались)\",\n                    attachment_type=allure.attachment_type.JSON\n                )\n>           assert len(created_records) == expected_records_in_cdr_table, \\\n                f\"Ожидалось {expected_records_in_cdr_table} записей в 'cdr_record' после отправки невалидных данных, \" \\\n                f\"но найдено {len(created_records)}.\"\nE           AssertionError: Ожидалось 0 записей в 'cdr_record' после отправки невалидных данных, но найдено 10.\nE           assert 10 == 0\nE            +  where 10 = len([{'id': 10, 'in_one_network': True, 'lasts': -1000000000, 'msisdn_one': '79334455667', ...}, {'id': 9, 'in_one_network': False, 'lasts': -1000000000, 'msisdn_one': '79123456789', ...}, {'id': 8, 'in_one_network': True, 'lasts': -15000000000, 'msisdn_one': '79996667755', ...}, {'id': 7, 'in_one_network': True, 'lasts': -60000000000, 'msisdn_one': '79334455667', ...}, {'id': 6, 'in_one_network': True, 'lasts': -1000000000, 'msisdn_one': '79123456789', ...}, {'id': 5, 'in_one_network': False, 'lasts': 0, 'msisdn_one': '79996667755', ...}, ...])\n\ntests/test_start_after_end.py:97: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"db_connection","time":{"start":1746967627347,"stop":1746967627362,"duration":15},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Проверяет, что CDR, где время окончания ('callEnd') предшествует времени начала ('callStart'), НЕ добавляются в таблицу 'cdr_record'. Используется файл: test_data/end_before_start.jsonl. Ожидается 0 записей в БД.","status":"failed","statusMessage":"AssertionError: Ожидалось 0 записей в 'cdr_record' после отправки невалидных данных, но найдено 10.\nassert 10 == 0\n +  where 10 = len([{'id': 10, 'in_one_network': True, 'lasts': -1000000000, 'msisdn_one': '79334455667', ...}, {'id': 9, 'in_one_network': False, 'lasts': -1000000000, 'msisdn_one': '79123456789', ...}, {'id': 8, 'in_one_network': True, 'lasts': -15000000000, 'msisdn_one': '79996667755', ...}, {'id': 7, 'in_one_network': True, 'lasts': -60000000000, 'msisdn_one': '79334455667', ...}, {'id': 6, 'in_one_network': True, 'lasts': -1000000000, 'msisdn_one': '79123456789', ...}, {'id': 5, 'in_one_network': False, 'lasts': 0, 'msisdn_one': '79996667755', ...}, ...])","statusTrace":"db_connection = <psycopg.Connection [INTRANS] (host=localhost user=postgres database=brt) at 0x7fcc111d9370>\n\n    @allure.epic(\"Обработка CDR в BRT\")\n    @allure.feature(\"Негативные сценарии - Логическая валидация\")\n    @allure.story(\"Отклонение CDR, где callEnd раньше callStart\")\n    @allure.title(\"Тест: BRT отклоняет CDR, если время окончания звонка раньше времени начала\")\n    @allure.description(\n        \"Проверяет, что CDR, где время окончания ('callEnd') предшествует времени начала ('callStart'), \"\n        \"НЕ добавляются в таблицу 'cdr_record'. Используется файл: test_data/end_before_start.jsonl. \"\n        \"Ожидается 0 записей в БД.\"\n    )\n    @allure.severity(allure.severity_level.CRITICAL)\n    def test_no_invalid_cdr_inserted_when_end_before_start(\n        db_connection: psycopg.Connection\n    ):\n        \"\"\"\n        Проверяет, что CDR, где время окончания ('callEnd') предшествует времени начала ('callStart'),\n        НЕ добавляются в таблицу 'cdr_record'. Предполагается, что такие записи отбрасываются\n        обработчиком.\n        \"\"\"\n        cdr_file_path = \"test_data/end_before_start.jsonl\"\n        logger.info(f\"--- Запуск теста: Проверка отсутствия вставки невалидных CDR (callEnd < callStart) из {cdr_file_path} ---\")\n    \n        required_msisdns = [\"79123456789\", \"79996667755\", \"79334455667\"]\n        with allure.step(f\"1. Подготовка БД: создание/проверка абонентов {required_msisdns} и очистка cdr_record\"):\n            logger.info(f\"Подготовка БД (очистка cdr_record, создание абонентов): {required_msisdns}...\")\n            subscriber_ids = prepare_database_for_cdr_test(db_connection, required_msisdns)\n            allure.attach(\n                json.dumps(subscriber_ids, indent=2, ensure_ascii=False),\n                name=\"ID подготовленных/проверенных абонентов\",\n                attachment_type=allure.attachment_type.JSON\n            )\n            assert len(subscriber_ids) == len(required_msisdns), \"Не удалось подготовить абонентов в БД\"\n            logger.info(f\"БД подготовлена. ID абонентов: {subscriber_ids}\")\n    \n        with allure.step(f\"2. Чтение CDR (callEnd < callStart) из файла: {cdr_file_path}\"):\n            logger.info(f\"Чтение CDR из файла: {cdr_file_path}\")\n            cdr_list_to_send = read_cdr_file(cdr_file_path)\n            allure.attach(\n                json.dumps(cdr_list_to_send, indent=2, ensure_ascii=False),\n                name=f\"Содержимое файла {cdr_file_path} (callEnd < callStart)\",\n                attachment_type=allure.attachment_type.JSON\n            )\n            assert cdr_list_to_send, f\"Не удалось прочитать данные из {cdr_file_path} или файл пуст\"\n            logger.info(f\"Прочитано {len(cdr_list_to_send)} записей из файла для отправки (все невалидные).\")\n    \n        expected_records_in_cdr_table = 0\n        allure.attach(\n            str(expected_records_in_cdr_table),\n            name=\"Ожидаемое количество записей в БД после обработки\",\n            attachment_type=allure.attachment_type.TEXT\n        )\n    \n        with allure.step(f\"3. Отправка {len(cdr_list_to_send)} CDR (callEnd < callStart) в RabbitMQ\"):\n            logger.info(\"Отправка невалидных CDR данных в RabbitMQ...\")\n            allure.attach(\n                json.dumps(cdr_list_to_send, indent=2, ensure_ascii=False),\n                name=\"CDRы (callEnd < callStart), отправленные в RabbitMQ\",\n                attachment_type=allure.attachment_type.JSON\n            )\n            send_success = send_cdr_list_to_rabbitmq(cdr_list_to_send)\n            assert send_success, \"Не удалось отправить сообщение в RabbitMQ\"\n    \n        processing_time_seconds = 5\n        with allure.step(f\"4. Ожидание {processing_time_seconds} секунд для обработки CDR сервисом BRT\"):\n            logger.info(f\"Ожидание {processing_time_seconds} секунд для обработки CDR консьюмером...\")\n            time.sleep(processing_time_seconds)\n    \n        with allure.step(f\"5. Проверка отсутствия записей в таблице cdr_record (ожидается: {expected_records_in_cdr_table})\"):\n            logger.info(\"Проверка таблицы cdr_record на отсутствие новых записей...\")\n            # Используем переменную created_records для консистентности с другими тестами\n            created_records = get_cdr_records(db_connection, limit=len(cdr_list_to_send) + 5)\n            logger.info(f\"Фактически найдено в cdr_record: {len(created_records)}.\")\n    \n            allure.attach(\n                f\"Ожидалось записей: {expected_records_in_cdr_table}\\n\"\n                f\"Фактически найдено записей: {len(created_records)}\",\n                name=\"Сводка по записям в БД\",\n                attachment_type=allure.attachment_type.TEXT\n            )\n            if created_records: # Прикрепляем только если что-то неожиданно нашлось\n                allure.attach(\n                    json.dumps(created_records, indent=2, ensure_ascii=False, default=str),\n                    name=\"Записи, полученные из cdr_record (не ожидались)\",\n                    attachment_type=allure.attachment_type.JSON\n                )\n>           assert len(created_records) == expected_records_in_cdr_table, \\\n                f\"Ожидалось {expected_records_in_cdr_table} записей в 'cdr_record' после отправки невалидных данных, \" \\\n                f\"но найдено {len(created_records)}.\"\nE           AssertionError: Ожидалось 0 записей в 'cdr_record' после отправки невалидных данных, но найдено 10.\nE           assert 10 == 0\nE            +  where 10 = len([{'id': 10, 'in_one_network': True, 'lasts': -1000000000, 'msisdn_one': '79334455667', ...}, {'id': 9, 'in_one_network': False, 'lasts': -1000000000, 'msisdn_one': '79123456789', ...}, {'id': 8, 'in_one_network': True, 'lasts': -15000000000, 'msisdn_one': '79996667755', ...}, {'id': 7, 'in_one_network': True, 'lasts': -60000000000, 'msisdn_one': '79334455667', ...}, {'id': 6, 'in_one_network': True, 'lasts': -1000000000, 'msisdn_one': '79123456789', ...}, {'id': 5, 'in_one_network': False, 'lasts': 0, 'msisdn_one': '79996667755', ...}, ...])\n\ntests/test_start_after_end.py:97: AssertionError","steps":[{"name":"1. Подготовка БД: создание/проверка абонентов ['79123456789', '79996667755', '79334455667'] и очистка cdr_record","time":{"start":1746967627362,"stop":1746967627372,"duration":10},"status":"passed","steps":[],"attachments":[{"uid":"aef3126e003c7679","name":"ID подготовленных/проверенных абонентов","source":"aef3126e003c7679.json","type":"application/json","size":62}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},{"name":"2. Чтение CDR (callEnd < callStart) из файла: test_data/end_before_start.jsonl","time":{"start":1746967627372,"stop":1746967627374,"duration":2},"status":"passed","steps":[],"attachments":[{"uid":"d9fafc0d8c9df267","name":"Содержимое файла test_data/end_before_start.jsonl (callEnd < callStart)","source":"d9fafc0d8c9df267.json","type":"application/json","size":1972}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},{"name":"3. Отправка 10 CDR (callEnd < callStart) в RabbitMQ","time":{"start":1746967627374,"stop":1746967627382,"duration":8},"status":"passed","steps":[],"attachments":[{"uid":"42ca6c0be724e7c6","name":"CDRы (callEnd < callStart), отправленные в RabbitMQ","source":"42ca6c0be724e7c6.json","type":"application/json","size":1972}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},{"name":"4. Ожидание 5 секунд для обработки CDR сервисом BRT","time":{"start":1746967627382,"stop":1746967632383,"duration":5001},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"5. Проверка отсутствия записей в таблице cdr_record (ожидается: 0)","time":{"start":1746967632383,"stop":1746967632388,"duration":5},"status":"failed","statusMessage":"AssertionError: Ожидалось 0 записей в 'cdr_record' после отправки невалидных данных, но найдено 10.\nassert 10 == 0\n +  where 10 = len([{'id': 10, 'in_one_network': True, 'lasts': -1000000000, 'msisdn_one': '79334455667', ...}, {'id': 9, 'in_one_network': False, 'lasts': -1000000000, 'msisdn_one': '79123456789', ...}, {'id': 8, 'in_one_network': True, 'lasts': -15000000000, 'msisdn_one': '79996667755', ...}, {'id': 7, 'in_one_network': True, 'lasts': -60000000000, 'msisdn_one': '79334455667', ...}, {'id': 6, 'in_one_network': True, 'lasts': -1000000000, 'msisdn_one': '79123456789', ...}, {'id': 5, 'in_one_network': False, 'lasts': 0, 'msisdn_one': '79996667755', ...}, ...])\n","statusTrace":"  File \"/home/imenov/nexign/auto_tests/baby-billing/auto-tests/brt_test_cdr/tests/test_start_after_end.py\", line 97, in test_no_invalid_cdr_inserted_when_end_before_start\n    assert len(created_records) == expected_records_in_cdr_table, \\\n        f\"Ожидалось {expected_records_in_cdr_table} записей в 'cdr_record' после отправки невалидных данных, \" \\\n        f\"но найдено {len(created_records)}.\"\n","steps":[],"attachments":[{"uid":"6e1807250dcffc9e","name":"Сводка по записям в БД","source":"6e1807250dcffc9e.txt","type":"text/plain","size":91},{"uid":"fdf74c07b40b22fe","name":"Записи, полученные из cdr_record (не ожидались)","source":"fdf74c07b40b22fe.json","type":"application/json","size":2285}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":2,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"cf0abd09aa018cff","name":"Ожидаемое количество записей в БД после обработки","source":"cf0abd09aa018cff.txt","type":"text/plain","size":1},{"uid":"3401807f536b7952","name":"log","source":"3401807f536b7952.txt","type":"text/plain","size":5245},{"uid":"93db084651f21632","name":"stderr","source":"93db084651f21632.txt","type":"text/plain","size":5076}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":5,"attachmentsCount":8,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"db_connection::0","time":{"start":1746967632396,"stop":1746967632398,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"severity","value":"critical"},{"name":"story","value":"Отклонение CDR, где callEnd раньше callStart"},{"name":"epic","value":"Обработка CDR в BRT"},{"name":"feature","value":"Негативные сценарии - Логическая валидация"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_start_after_end"},{"name":"host","value":"imenov"},{"name":"thread","value":"32580-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_start_after_end"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"critical","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"37863c73d8fc430b.json","parameterValues":[]}